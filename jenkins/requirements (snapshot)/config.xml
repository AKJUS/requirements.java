<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.13">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>100</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <com.gem.persistentparameter.PersistentStringParameterDefinition plugin="persistent-parameter@1.1">
          <name>branch</name>
          <description>What branch should be built?</description>
          <defaultValue>default</defaultValue>
          <successfulOnly>true</successfulOnly>
        </com.gem.persistentparameter.PersistentStringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.36.1">
    <script>// GCC versions
// ------------
//
// GCC outputs dynamically-linked libraries that depend on specific versions of the glibc library.
// https://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html lists which GLIBCXX version ships with each version of GCC.
// As of 2017-03-09, AWS linux images ship with GCC 4.8.3: https://aws.amazon.com/amazon-linux-ami/2015.09-release-notes/
// Therefore, we must use this version of GCC or older.
//
// Using a newer version of GCC results in the following error:
//
// java.lang.UnsatisfiedLinkError: librequirements.so: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.21&apos; not found (required by librequirements.so)
//
// See http://stackoverflow.com/a/17275650/14731 for overriding the GCC version used by CMake

parallel windows:
{
    node(&quot;windows &amp;&amp; i386 &amp;&amp; amd64&quot;)
    {
        timeout(10)
        {
            stage(&quot;Checkout (windows)&quot;)
            {
                // Wipe out local repository in case it contains extra commits from a previous (broken) build
                deleteDir()
                checkout changelog: true, poll: true, scm: [$class: &quot;MercurialSCM&quot;, browser: [$class: &quot;BitBucket&quot;, url: &quot;https://bitbucket.org/cowwoc/requirements/&quot;], clean: true, credentialsId: &quot;bitbucket&quot;,  installation: &quot;mercurial&quot;, source: &quot;https://bitbucket.org/cowwoc/requirements/&quot;, revision: &quot;${branch}&quot;]
            }
        }
        timeout(15)
        {
            withEnv([&quot;JAVA_HOME=${ tool &apos;JAVA32_HOME&apos; }&quot;, &quot;PATH+MAVEN=${tool &apos;Maven&apos;}/bin;${env.JAVA_HOME}/bin&quot;])
            {
                stage(&quot;Deploy (windows-x86_32)&quot;)
                {
                    // https://jenkins.io/doc/pipeline/examples/
                    // Apache Maven related side notes:
                    // --batch-mode : recommended in CI to inform maven to not run in interactive mode (less logs)
                    // -V : strongly recommended in CI, will display the JDK and Maven versions in use.
                    //      Very useful to be quickly sure the selected versions were the ones you think.
                    // -U : force maven to update snapshots each time (default : once an hour, makes no sense in CI).
                    // -Dsurefire.useFile=false : useful in CI. Displays test errors in the logs directly (instead of
                    //                            having to crawl the workspace files to see the cause).            
                    bat script: &quot;mvn --batch-mode -V -U -e clean deploy -Pwindows-x86_32-release -Dsurefire.useFile=false&quot;
                    archiveArtifacts &quot;**/target/*.jar, native/target/windows-x86_32-release/classes/*.dll, native/target/windows-x86_32-release/classes/*.pdb&quot;
                }
            }
        }
        timeout(15)
        {
            withEnv([&quot;JAVA_HOME=${ tool &apos;JAVA64_HOME&apos; }&quot;, &quot;PATH+MAVEN=${tool &apos;Maven&apos;}/bin;${env.JAVA_HOME}/bin&quot;])
            {
                stage(&quot;Deploy (windows-amd64)&quot;)
                {
                    bat script: &quot;mvn --batch-mode -V -U -e clean deploy -Pwindows-x86_64-release -Dsurefire.useFile=false&quot;
                    archiveArtifacts &quot;**/target/*.jar, native/target/windows-x86_64-release/classes/*.dll, native/target/windows-x86_64-release/classes/*.pdb&quot;
                }
            }
        }
    }
}, linux_i386:
{
    node(&quot;linux &amp;&amp; i386&quot;)
    {
        timeout(10)
        {
            stage(&quot;Checkout (linux-i386)&quot;)
            {
                // Wipe out local repository in case it contains extra commits from a previous (broken) build
                deleteDir()
                checkout changelog: true, poll: true, scm: [$class: &quot;MercurialSCM&quot;, browser: [$class: &quot;BitBucket&quot;, url: &quot;https://bitbucket.org/cowwoc/requirements/&quot;], clean: true, credentialsId: &quot;bitbucket&quot;, installation: &quot;mercurial&quot;, source: &quot;https://bitbucket.org/cowwoc/requirements/&quot;, revision: &quot;${branch}&quot;]
            }
        }
        timeout(15)
        {
            withEnv([&quot;JAVA_HOME=${ tool &apos;JAVA32_HOME&apos; }&quot;, &quot;PATH+MAVEN=${tool &apos;Maven&apos;}/bin:${env.JAVA_HOME}/bin&quot;])
            {
                stage(&quot;Deploy (linux-i386)&quot;)
                {
                    // 1. Use the same GCC version as AWS. See top of this script for more information.
                    // 2. grep returns a non-zero value if no match is found
                    sh script: &quot;&quot;&quot;sudo apt-get install cmake gcc-4.7 g++-4.7 -y
                    export CC=/usr/bin/gcc-4.7
                    export CXX=/usr/bin/g++-4.7
                    mvn --batch-mode -V -U -e clean deploy -Plinux-x86_32-release -Dsurefire.useFile=false
                    strings native/target/linux-x86_32-release/classes/librequirements.so | (! grep GLIBCXX_3.4.21)&quot;&quot;&quot;
                    archiveArtifacts &quot;**/target/*.jar, native/target/linux-x86_32-release/classes/librequirements.so&quot;
                }
            }
        }
    }
}, linux_amd64:
{
    node(&quot;linux &amp;&amp; amd64&quot;)
    {
        timeout(10)
        {
            stage(&quot;Checkout (linux-amd64)&quot;)
            {
                // Wipe out local repository in case it contains extra commits from a previous (broken) build
                deleteDir()
                checkout changelog: true, poll: true, scm: [$class: &quot;MercurialSCM&quot;, browser: [$class: &quot;BitBucket&quot;, url: &quot;https://bitbucket.org/cowwoc/requirements/&quot;], clean: true, credentialsId: &quot;bitbucket&quot;,  installation: &quot;mercurial&quot;, source: &quot;https://bitbucket.org/cowwoc/requirements/&quot;, revision: &quot;${branch}&quot;]
            }
        }
        timeout(15)
        {
            withEnv([&quot;JAVA_HOME=${ tool &apos;JAVA64_HOME&apos; }&quot;, &quot;PATH+MAVEN=${tool &apos;Maven&apos;}/bin:${env.JAVA_HOME}/bin&quot;])
            {
                stage(&quot;Deploy (linux-amd64)&quot;)
                {
                    // 1. Use the same GCC version as AWS. See top of this script for more information.
                    // 2. grep returns a non-zero value if no match is found
                    sh script: &quot;&quot;&quot;sudo apt-get install cmake gcc-4.7 g++-4.7 -y
                    export CC=/usr/bin/gcc-4.7
                    export CXX=/usr/bin/g++-4.7
                    mvn --batch-mode -V -U -e clean deploy -Plinux-x86_64-release -Dsurefire.useFile=false
                    strings native/target/linux-x86_64-release/classes/librequirements.so | (! grep GLIBCXX_3.4.21)&quot;&quot;&quot;
                    archiveArtifacts &quot;**/target/*.jar, native/target/linux-x86_64-release/classes/librequirements.so&quot;
                }
            }
        }
    }
}, mac:
{
    node(&quot;mac&quot;)
    {
        timeout(10)
        {
            stage(&quot;Checkout (mac)&quot;)
            {
                // Wipe out local repository in case it contains extra commits from a previous (broken) build
                deleteDir()
                checkout changelog: true, poll: true, scm: [$class: &quot;MercurialSCM&quot;, browser: [$class: &quot;BitBucket&quot;, url: &quot;https://bitbucket.org/cowwoc/requirements/&quot;], clean: true, credentialsId: &quot;bitbucket&quot;,  installation: &quot;mercurial&quot;, source: &quot;https://bitbucket.org/cowwoc/requirements/&quot;, revision: &quot;${branch}&quot;]
            }
        }
        timeout(15)
        {
            withEnv([&quot;JAVA_HOME=${ tool &apos;JAVA64_HOME&apos; }&quot;, &quot;PATH+MAVEN=${tool &apos;Maven&apos;}/bin:${env.JAVA_HOME}/bin&quot;])
            {
                stage(&quot;Deploy (mac-x86_64)&quot;)
                {
                    sh script: &quot;mvn --batch-mode -V -U -e clean deploy -Pmac-x86_64-release -Dsurefire.useFile=false&quot;
                    archiveArtifacts &quot;**/target/*.jar, native/target/mac-x86_64-release/classes/librequirements.dylib&quot;
                }
            }
        }
    }
},
failFast: true</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <quietPeriod>60</quietPeriod>
  <disabled>false</disabled>
</flow-definition>