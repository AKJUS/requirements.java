<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1189.va_d37a_e9e4eda_">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>100</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <com.gem.persistentparameter.PersistentStringParameterDefinition plugin="persistent-parameter@1.3">
          <name>branch</name>
          <description>What branch should be built?</description>
          <defaultValue>master</defaultValue>
          <successfulOnly>true</successfulOnly>
          <trim>false</trim>
        </com.gem.persistentparameter.PersistentStringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2725.v7b_c717eb_12ce">
    <script>// Command-line options (taken from https://jenkins.io/doc/pipeline/examples/):
// --batch-mode : recommended in CI to inform maven to not run in interactive mode (less logs)
// -V : strongly recommended in CI, will display the JDK and Maven versions in use.
//      Very useful to be quickly sure the selected versions were the ones you think.
// -U : force maven to update snapshots each time (default : once an hour, makes no sense in CI).
// -Dsurefire.useFile=false : useful in CI. Displays test errors in the logs directly (instead of
//                            having to crawl the workspace files to see the cause).
// -e : Display stack-traces on failure
// -------------------------------------------------------------------------------------------------
//
//
// GCC versions
// ------------
//
// GCC outputs dynamically-linked libraries that depend on specific versions of the glibc library.
// https://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html lists which GLIBCXX version ships with each version of GCC.
// As of 2022-02-07, AWS linux images ship with GCC 11.2.1: https://docs.aws.amazon.com/linux/al2022/release-notes/all-packages-al2022.html
// Therefore, we must use this version of GCC or older.
//
// Using a newer version of GCC results in the following kind of error:
//
// java.lang.UnsatisfiedLinkError: librequirements.so: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.21&apos; not found (required by librequirements.so)
//
// See http://stackoverflow.com/a/17275650/14731 for overriding the GCC version used by CMake

// Per https://issues.sonatype.org/browse/NEXUS-18753 we cannot use Staging Workflows for SNAPSHOT builds.
//
// nexus-staging-maven-plugin does not allow us to run unit tests and deploy at the same time because skipNexusStagingDeployMojo cannot be set to true
// in the last module. Therefore we build twice. The first time we run unit tests without deploying. The second time we deploy without running unit tests.
def repository = &quot;https://github.com/cowwoc/requirements.java/&quot;

// Build and deploy from all platforms
parallel linux:
{
    // Linux deploys the portable modules as well as its platform-specific binaries.
    // Remaining platforms only deploy platform-specific binaries.
    node(&quot;linux&quot;)
    {
        timeout(10)
        {
            stage(&quot;Checkout (linux)&quot;)
            {
                // Wipe out local repository in case it contains extra commits from a previous (broken) build
                deleteDir()
                checkout([$class: &quot;GitSCM&quot;, branches: [[name: &quot;*/${branch}&quot;]], browser: [$class: &quot;GithubWeb&quot;, repoUrl: repository], doGenerateSubmoduleConfigurations: false, extensions: [[$class: &quot;MessageExclusion&quot;, excludedMessage: &quot;^\\[jenkins\\]&quot;]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &quot;github-cowwoc&quot;, url: repository]]])
            }
        }
        timeout(40)
        {
            // gpg resides in /usr/local/bin
            withEnv([&quot;JAVA_HOME=${ tool &quot;JDK17_HOME&quot; }&quot;, &quot;PATH+MAVEN=${tool &quot;Maven&quot;}/bin:${env.JAVA_HOME}/bin&quot;])
            {
                stage(&quot;Deploy (linux)&quot;)
                {
                    // Deploy platform-specific JAR
                    // Use the same GCC version as AWS. See top of this script for more information.
                    
                    sh script: &quot;&quot;&quot;sudo apt-get update
                    	sudo apt-get install build-essential -y
                    	mvn --batch-mode -V -e -U -Dsurefire.useFile=false install
                    	mvn --batch-mode -e -U -Dsurefire.useFile=false -Ddeploy deploy&quot;&quot;&quot;
                    archiveArtifacts artifacts: &quot;**/target/*.jar, natives/target/linux-x86_64-release/*.jar&quot;, excludes: &quot;**/target/test-classes/**&quot;
                }
            }
        }
    }
}, mac:
{
    node(&quot;mac&quot;)
    {
        timeout(10)
        {
            stage(&quot;Checkout (mac)&quot;)
            {
                // Wipe out local repository in case it contains extra commits from a previous (broken) build
                deleteDir()
                checkout([$class: &quot;GitSCM&quot;, branches: [[name: &quot;*/${branch}&quot;]], browser: [$class: &quot;GithubWeb&quot;, repoUrl: repository], doGenerateSubmoduleConfigurations: false, extensions: [], gitTool: &quot;jgit&quot;, submoduleCfg: [], userRemoteConfigs: [[credentialsId: &quot;github-cowwoc&quot;, url: repository]]])
            }
        }
        timeout(40)
        {
            // gpg resides in /usr/local/bin
            withEnv([&quot;JAVA_HOME=${ tool &quot;JDK17_HOME&quot; }&quot;, &quot;PATH+MAVEN=${tool &quot;Maven&quot;}/bin:${env.JAVA_HOME}/bin:/usr/local/bin&quot;])
            {
			          stage(&quot;Deploy (mac)&quot;)
                {
                    sh script: &quot;&quot;&quot;mvn --batch-mode -V -e -U -Dsurefire.useFile=false install
                        mvn --batch-mode -e -U -Dsurefire.useFile=false -Ddeploy deploy&quot;&quot;&quot;
                    archiveArtifacts artifacts: &quot;**/target/*.jar, natives/target/mac-x86_64-release/*.jar&quot;, excludes: &quot;**/target/test-classes/**&quot;
                }
            }
        }
    }
}, windows:
{
    node(&quot;windows&quot;)
    {
        timeout(10)
        {
            stage(&quot;Checkout (windows)&quot;)
            {
                // Wipe out local repository in case it contains extra commits from a previous (broken) build
                deleteDir()
                checkout([$class: &quot;GitSCM&quot;, branches: [[name: &quot;*/${branch}&quot;]], browser: [$class: &quot;GithubWeb&quot;, repoUrl: repository], doGenerateSubmoduleConfigurations: false, extensions: [[$class: &quot;MessageExclusion&quot;, excludedMessage: &quot;^\\[jenkins\\]&quot;]], gitTool: &quot;jgit&quot;, submoduleCfg: [], userRemoteConfigs: [[credentialsId: &quot;github-cowwoc&quot;, url: repository]]])
            }
        }
        timeout(40)
        {
            // Windows needs a longer timeout due to Windows Defender (antivirus) slowing things down
            withEnv([&quot;JAVA_HOME=${ tool &quot;JDK17_HOME&quot; }&quot;, &quot;PATH+MAVEN=${tool &quot;Maven&quot;}/bin;${env.JAVA_HOME}/bin&quot;])
            {
                stage(&quot;Deploy (windows)&quot;)
                {
                    bat script: &quot;&quot;&quot;call mvn --batch-mode -V -e -U -Dsurefire.useFile=false install
                        call mvn --batch-mode -e -U -Dsurefire.useFile=false -Ddeploy deploy&quot;&quot;&quot;
                    archiveArtifacts artifacts: &quot;**/target/*.jar, natives/target/windows-x86_64-release/*.jar&quot;, excludes: &quot;**/target/test-classes/**&quot;
                }
            }
        }
    }
},
failFast: true</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <quietPeriod>60</quietPeriod>
  <disabled>false</disabled>
</flow-definition>